require('dotenv').config();
const mongoose = require('mongoose');
const Learn = require('../models/learn.model');
const User = require('../src/models/user.model');

// Connexion √† MongoDB
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('‚úÖ MongoDB connect√©'))
  .catch(err => {
    console.error('‚ùå Erreur MongoDB :', err);
    process.exit(1);
  });

const createTestLogs = async () => {
  try {
    // R√©cup√©rer les utilisateurs de test
    const users = await User.find({ 
      email: { $in: ['thomas@coach.com', 'sarah@coach.com'] } 
    });

    if (users.length === 0) {
      console.log('‚ùå Aucun utilisateur de test trouv√©. Cr√©ez d\'abord les utilisateurs avec createTestUsers.js');
      return;
    }

    // Supprimer les logs existants
    await Learn.deleteMany({});
    console.log('üóëÔ∏è Logs existants supprim√©s');

    const testLogs = [];
    const now = new Date();

    // G√©n√©rer des logs pour chaque utilisateur
    for (const user of users) {
      // Logs de chat/advice
      testLogs.push({
        userId: user._id,
        type: 'chat',
        context: 'Demande de conseils nutrition',
        result: 'Conseils personnalis√©s fournis',
        metadata: {
          userInput: 'Comment am√©liorer mon alimentation pour perdre du poids ?',
          aiResponse: 'Voici mes recommandations personnalis√©es...',
          confidence: 0.85,
          source: 'nutrition_expert',
          sessionId: 'session_' + Math.random().toString(36).substr(2, 9)
        },
        timestamp: new Date(now - Math.random() * 7 * 24 * 60 * 60 * 1000) // 7 derniers jours
      });

      // Logs de goals
      testLogs.push({
        userId: user._id,
        type: 'goals',
        context: 'Cr√©ation objectif perte de poids',
        result: 'Objectif cr√©√© avec succ√®s',
        metadata: {
          userInput: 'Je veux perdre 5kg en 3 mois',
          aiResponse: 'Objectif r√©alisable cr√©√© avec plan personnalis√©',
          confidence: 0.92,
          source: 'goal_planner',
          sessionId: 'session_' + Math.random().toString(36).substr(2, 9)
        },
        timestamp: new Date(now - Math.random() * 5 * 24 * 60 * 60 * 1000) // 5 derniers jours
      });

      // Logs de nutrition
      testLogs.push({
        userId: user._id,
        type: 'nutrition',
        context: 'Analyse repas du midi',
        result: 'Repas analys√© - 650 calories, √©quilibr√©',
        metadata: {
          userInput: 'Salade de quinoa avec l√©gumes et poulet',
          aiResponse: 'Excellent choix ! Repas √©quilibr√© avec bon ratio prot√©ines/glucides',
          confidence: 0.88,
          source: 'meal_analyzer',
          sessionId: 'session_' + Math.random().toString(36).substr(2, 9)
        },
        timestamp: new Date(now - Math.random() * 3 * 24 * 60 * 60 * 1000) // 3 derniers jours
      });

      // Logs de workout
      testLogs.push({
        userId: user._id,
        type: 'workout',
        context: 'G√©n√©ration programme musculation',
        result: 'Programme 3x/semaine cr√©√©',
        metadata: {
          userInput: 'Programme musculation d√©butant 3 fois par semaine',
          aiResponse: 'Programme adapt√© cr√©√© avec progression sur 8 semaines',
          confidence: 0.90,
          source: 'workout_planner',
          sessionId: 'session_' + Math.random().toString(36).substr(2, 9)
        },
        timestamp: new Date(now - Math.random() * 2 * 24 * 60 * 60 * 1000) // 2 derniers jours
      });

      // Logs de health
      testLogs.push({
        userId: user._id,
        type: 'health',
        context: 'Analyse donn√©es sant√©',
        result: 'Recommandations sant√© g√©n√©r√©es',
        metadata: {
          userInput: 'Analyse de mes m√©triques de sommeil et stress',
          aiResponse: 'Votre sommeil s\'am√©liore, continuez vos efforts de relaxation',
          confidence: 0.87,
          source: 'health_analyzer',
          sessionId: 'session_' + Math.random().toString(36).substr(2, 9)
        },
        timestamp: new Date(now - Math.random() * 1 * 24 * 60 * 60 * 1000) // 1 dernier jour
      });
    }

    // Ajouter quelques logs suppl√©mentaires r√©cents
    const recentLogs = [
      {
        userId: users[0]._id,
        type: 'chat',
        context: 'Question sur hydratation',
        result: 'Conseils hydratation fournis',
        metadata: {
          userInput: 'Combien d\'eau dois-je boire par jour ?',
          aiResponse: 'Pour votre profil, je recommande 2.5L par jour',
          confidence: 0.95,
          source: 'hydration_expert'
        },
        timestamp: new Date(now - 30 * 60 * 1000) // 30 minutes ago
      },
      {
        userId: users[1]._id,
        type: 'nutrition',
        context: 'Analyse petit-d√©jeuner',
        result: 'Petit-d√©jeuner analys√© - 420 calories',
        metadata: {
          userInput: 'Avoine avec fruits et yaourt grec',
          aiResponse: 'Parfait petit-d√©jeuner √©quilibr√© !',
          confidence: 0.93,
          source: 'meal_analyzer'
        },
        timestamp: new Date(now - 15 * 60 * 1000) // 15 minutes ago
      }
    ];

    testLogs.push(...recentLogs);

    // Ins√©rer tous les logs
    await Learn.insertMany(testLogs);

    console.log(`‚úÖ ${testLogs.length} logs de test cr√©√©s avec succ√®s !`);
    console.log('üìä R√©partition des logs :');
    
    const stats = testLogs.reduce((acc, log) => {
      acc[log.type] = (acc[log.type] || 0) + 1;
      return acc;
    }, {});
    
    Object.entries(stats).forEach(([type, count]) => {
      console.log(`   ${type}: ${count} logs`);
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des logs :', error);
  } finally {
    mongoose.connection.close();
    console.log('üîå Connexion MongoDB ferm√©e');
  }
};

createTestLogs();
