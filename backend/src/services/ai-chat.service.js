const { OpenAI } = require('openai');
const Anthropic = require('@anthropic-ai/sdk');

class AIChatService {
  constructor() {
    // Configuration des APIs
    this.openaiEnabled = !!process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY !== 'your_openai_api_key_here';
    this.claudeEnabled = !!process.env.ANTHROPIC_API_KEY && process.env.ANTHROPIC_API_KEY !== 'your_anthropic_api_key_here';
    
    // Initialisation des clients
    if (this.openaiEnabled) {
      this.openai = new OpenAI({
        apiKey: process.env.OPENAI_API_KEY
      });
      console.log('‚úÖ OpenAI client initialis√©');
    }
    
    if (this.claudeEnabled) {
      this.anthropic = new Anthropic({
        apiKey: process.env.ANTHROPIC_API_KEY
      });
      console.log('‚úÖ Claude client initialis√©');
    }
    
    // Configuration par d√©faut
    this.defaultProvider = process.env.DEFAULT_AI_PROVIDER || 'openai';
    this.mockMode = !this.openaiEnabled && !this.claudeEnabled;
    
    if (this.mockMode) {
      console.warn('‚ö†Ô∏è Mode mock activ√© - Aucune cl√© API AI configur√©e');
      console.warn('üîë Configurez OPENAI_API_KEY ou ANTHROPIC_API_KEY pour utiliser l\'IA r√©elle');
    }
    
    // Prompts syst√®me pour diff√©rents contextes
    this.systemPrompts = {
      health_coach: `Tu es AVA, un coach sant√© IA expert et bienveillant. Tu aides les utilisateurs √† am√©liorer leur sant√© et bien-√™tre √† travers des conseils personnalis√©s.

TON R√îLE:
- Coach sant√© personnel et motivant
- Expert en nutrition, fitness, sommeil et gestion du stress
- Accompagnateur empathique et encourageant

DIRECTIVES:
- R√©ponds toujours en fran√ßais
- Sois concis mais informatif (max 200 mots sauf demande sp√©cifique)
- Donne des conseils pratiques et actionnables
- Adapte tes r√©ponses au niveau d'abonnement de l'utilisateur
- Ne donne jamais de diagnostic m√©dical
- Encourage √† consulter un professionnel si n√©cessaire
- Utilise les donn√©es de sant√© de l'utilisateur pour personnaliser tes conseils

STYLE:
- Ton amical et motivant
- Utilise des emojis occasionnellement
- Exemple concret et pratique
- Questions pour engager l'utilisateur`,

      nutrition: `Tu es un expert en nutrition qui aide les utilisateurs d'AVA √† am√©liorer leur alimentation.

SP√âCIALISATION:
- Analyse nutritionnelle des repas
- Recommandations alimentaires personnalis√©es  
- Plans de repas √©quilibr√©s
- Gestion des restrictions alimentaires

Utilise les donn√©es Spoonacular disponibles et donne des conseils pratiques et r√©alisables.`,

      fitness: `Tu es un coach sportif personnel qui aide les utilisateurs d'AVA √† atteindre leurs objectifs fitness.

SP√âCIALISATION:
- Programmes d'entra√Ænement personnalis√©s
- Conseils sur la r√©cup√©ration
- Motivation et encouragement
- Adaptation selon les donn√©es Garmin

Cr√©e des programmes progressifs et s√©curitaires adapt√©s au niveau de l'utilisateur.`,

      wellness: `Tu es un expert en bien-√™tre qui aide les utilisateurs d'AVA √† am√©liorer leur qualit√© de vie globale.

SP√âCIALISATION:
- Gestion du stress
- Optimisation du sommeil
- √âquilibre vie-travail
- Techniques de relaxation et mindfulness

Utilise les donn√©es de stress et sommeil Garmin pour des conseils personnalis√©s.`
    };
  }

  // G√©n√©rer une r√©ponse de chat
  async generateResponse(message, context = {}) {
    try {
      const {
        userId,
        userProfile,
        healthData,
        chatHistory = [],
        responseType = 'health_coach',
        subscriptionLevel = 'explore',
        maxTokens = 300
      } = context;

      console.log(`ü§ñ G√©n√©ration de r√©ponse AI pour ${userId || 'utilisateur anonyme'}`);

      // Utiliser l'IA r√©elle si disponible
      if (!this.mockMode) {
        return await this.generateRealAIResponse(message, context, responseType, maxTokens);
      }

      // Mode mock avec r√©ponses intelligentes
      return this.generateMockResponse(message, context, responseType);

    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration r√©ponse AI:', error);
      
      // Fallback vers r√©ponse mock en cas d'erreur
      return this.generateMockResponse(message, context);
    }
  }

  // G√©n√©rer r√©ponse avec IA r√©elle
  async generateRealAIResponse(message, context, responseType, maxTokens) {
    const systemPrompt = this.systemPrompts[responseType] || this.systemPrompts.health_coach;
    const provider = this.selectProvider(context.preferredProvider);
    
    // Construire le contexte personnalis√©
    const personalizedContext = this.buildPersonalizedContext(context);
    const fullPrompt = `${systemPrompt}\n\n${personalizedContext}\n\nUtilisateur: ${message}`;

    if (provider === 'claude' && this.claudeEnabled) {
      return await this.generateClaudeResponse(fullPrompt, maxTokens);
    } else if (provider === 'openai' && this.openaiEnabled) {
      return await this.generateOpenAIResponse(fullPrompt, maxTokens, context.chatHistory);
    }

    // Fallback si le provider pr√©f√©r√© n'est pas disponible
    throw new Error('Aucun provider AI disponible');
  }

  // G√©n√©rer r√©ponse avec Claude
  async generateClaudeResponse(prompt, maxTokens) {
    const response = await this.anthropic.messages.create({
      model: 'claude-3-sonnet-20240229',
      max_tokens: maxTokens,
      messages: [
        {
          role: 'user',
          content: prompt
        }
      ]
    });

    return {
      response: response.content[0].text,
      provider: 'claude',
      model: 'claude-3-sonnet',
      tokens: response.usage?.input_tokens + response.usage?.output_tokens,
      cost: this.calculateCost('claude', response.usage?.input_tokens, response.usage?.output_tokens)
    };
  }

  // G√©n√©rer r√©ponse avec OpenAI
  async generateOpenAIResponse(prompt, maxTokens, chatHistory = []) {
    const messages = [
      { role: 'system', content: prompt }
    ];

    // Ajouter l'historique de conversation (max 10 derniers messages)
    const recentHistory = chatHistory.slice(-10);
    messages.push(...recentHistory);

    const response = await this.openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: messages,
      max_tokens: maxTokens,
      temperature: 0.7,
      presence_penalty: 0.1,
      frequency_penalty: 0.1
    });

    return {
      response: response.choices[0].message.content,
      provider: 'openai',
      model: 'gpt-3.5-turbo',
      tokens: response.usage.total_tokens,
      cost: this.calculateCost('openai', response.usage.prompt_tokens, response.usage.completion_tokens)
    };
  }

  // G√©n√©rer r√©ponse mock intelligente
  generateMockResponse(message, context, responseType = 'health_coach') {
    const { userProfile, healthData, subscriptionLevel } = context;
    const userName = userProfile?.prenom || 'utilisateur';
    
    // Analyser le message pour d√©tecter les intentions
    const intent = this.detectIntent(message);
    
    const mockResponses = {
      greeting: [
        `Salut ${userName} ! üëã Je suis AVA, ton coach sant√© IA. Comment puis-je t'aider aujourd'hui ?`,
        `Bonjour ${userName} ! Pr√™t(e) √† am√©liorer ta sant√© avec moi ? üåü`,
        `Hello ${userName} ! Que veux-tu savoir sur ta sant√© et ton bien-√™tre ?`
      ],
      
      health_status: [
        `D'apr√®s tes donn√©es r√©centes, tu sembles √™tre sur la bonne voie ! ${this.generateHealthInsight(healthData)} Veux-tu des conseils sp√©cifiques ?`,
        `Tes m√©triques de sant√© montrent des tendances int√©ressantes. ${this.generateHealthInsight(healthData)} Comment te sens-tu ?`,
        `Ton score de sant√© global est encouraging ! ${this.generateHealthInsight(healthData)}`
      ],
      
      nutrition: [
        `Pour ton objectif nutritionnel, je recommande de te concentrer sur les prot√©ines et les l√©gumes. Veux-tu un plan de repas personnalis√© ?`,
        `Une alimentation √©quilibr√©e est cl√© pour tes objectifs. Avec ton abonnement ${subscriptionLevel}, je peux t'aider √† optimiser tes repas !`,
        `Tes habitudes alimentaires ont un impact direct sur tes performances. Parlons de nutrition pratique !`
      ],
      
      fitness: [
        `Bas√© sur ton niveau d'activit√©, je sugg√®re un programme progressif. Combien de temps peux-tu consacrer √† l'exercice par semaine ?`,
        `Tes donn√©es d'activit√© montrent que tu es motiv√©(e) ! Optimisons ton entra√Ænement ensemble üí™`,
        `Un bon √©quilibre cardio-musculation serait parfait pour toi. Veux-tu un programme personnalis√© ?`
      ],
      
      sleep: [
        `Le sommeil est crucial pour ta r√©cup√©ration. ${this.generateSleepAdvice(healthData)} Veux-tu des conseils pour mieux dormir ?`,
        `Tes donn√©es de sommeil sugg√®rent quelques am√©liorations possibles. Parlons d'hygi√®ne du sommeil !`,
        `Un sommeil de qualit√© boostera tes performances. Voici mes conseils pour cette nuit...`
      ],
      
      stress: [
        `La gestion du stress est importante pour ton bien-√™tre. ${this.generateStressAdvice(healthData)} Essayons des techniques de relaxation ?`,
        `Je vois que tu pourrais b√©n√©ficier de techniques anti-stress. Veux-tu apprendre quelques exercices de respiration ?`,
        `G√©rer le stress am√©liore tout le reste ! Parlons de techniques pratiques pour ton quotidien.`
      ],
      
      motivation: [
        `Tu es sur la bonne voie, ${userName} ! üåü Chaque petit pas compte. Quel est ton objectif principal aujourd'hui ?`,
        `Je crois en toi ! Tes efforts r√©cents montrent ta d√©termination. Continue comme √ßa ! üí™`,
        `Rappelle-toi pourquoi tu as commenc√©. Tu as d√©j√† fait tant de progr√®s ! Qu'est-ce qui te motive le plus ?`
      ],
      
      default: [
        `Int√©ressant ! En tant que ton coach sant√©, je pense que ${this.generateGenericAdvice(message, context)}. Veux-tu qu'on creuse ensemble ?`,
        `C'est une excellente question ! Avec tes donn√©es actuelles, je recommande ${this.generateGenericAdvice(message, context)}.`,
        `Laisse-moi t'aider avec √ßa ! Bas√© sur ton profil, ${this.generateGenericAdvice(message, context)}. Qu'en penses-tu ?`
      ]
    };

    const responses = mockResponses[intent] || mockResponses.default;
    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];

    return {
      response: selectedResponse,
      provider: 'mock',
      model: 'ava-mock-v1',
      tokens: selectedResponse.length / 4, // Estimation
      cost: 0,
      confidence: 0.8,
      intent: intent,
      subscription_gated: subscriptionLevel === 'explore' && intent !== 'greeting'
    };
  }

  // D√©tecter l'intention du message
  detectIntent(message) {
    const lowerMessage = message.toLowerCase();
    
    const intentKeywords = {
      greeting: ['bonjour', 'salut', 'hello', 'coucou', 'bonsoir'],
      health_status: ['comment', 'sant√©', 'forme', '√©tat', 'va', 'score'],
      nutrition: ['manger', 'repas', 'nutrition', 'aliment', 'r√©gime', 'calories'],
      fitness: ['sport', 'exercice', 'musculation', 'cardio', 'entra√Ænement', 'workout'],
      sleep: ['sommeil', 'dormir', 'fatigue', 'r√©veil', 'insomnie', 'repos'],
      stress: ['stress', 'anxi√©t√©', 'zen', 'relaxation', 'tension', 'calme'],
      motivation: ['motiver', 'encourager', 'objectif', 'but', 'r√©ussir', 'continuer']
    };

    for (const [intent, keywords] of Object.entries(intentKeywords)) {
      if (keywords.some(keyword => lowerMessage.includes(keyword))) {
        return intent;
      }
    }

    return 'default';
  }

  // Construire le contexte personnalis√©
  buildPersonalizedContext(context) {
    const { userProfile, healthData, subscriptionLevel } = context;
    
    let contextStr = `CONTEXTE UTILISATEUR:\n`;
    
    if (userProfile) {
      contextStr += `- Profil: ${userProfile.prenom || 'Utilisateur'}\n`;
      contextStr += `- Abonnement: ${subscriptionLevel}\n`;
      if (userProfile.preferences?.objectif) {
        contextStr += `- Objectif: ${userProfile.preferences.objectif}\n`;
      }
    }
    
    if (healthData) {
      contextStr += `- Donn√©es r√©centes:\n`;
      if (healthData.steps) contextStr += `  * Pas: ${healthData.steps}\n`;
      if (healthData.sleep) contextStr += `  * Sommeil: ${healthData.sleep}h\n`;
      if (healthData.stress) contextStr += `  * Stress: ${healthData.stress}/100\n`;
      if (healthData.energy) contextStr += `  * √ânergie: ${healthData.energy}/100\n`;
    }

    return contextStr;
  }

  // G√©n√©rer des insights de sant√©
  generateHealthInsight(healthData) {
    if (!healthData) return "Connecte tes donn√©es pour des conseils personnalis√©s !";
    
    const insights = [];
    
    if (healthData.steps) {
      if (healthData.steps >= 10000) {
        insights.push("Excellent pour les pas ! üö∂‚Äç‚ôÄÔ∏è");
      } else if (healthData.steps >= 7500) {
        insights.push("Bon niveau d'activit√© !");
      } else {
        insights.push("On peut augmenter l'activit√© quotidienne");
      }
    }
    
    if (healthData.sleep) {
      if (healthData.sleep >= 7) {
        insights.push("Sommeil dans la bonne moyenne ! üò¥");
      } else {
        insights.push("Le sommeil pourrait √™tre optimis√©");
      }
    }
    
    return insights.length > 0 ? insights.join(' ') : "Tes donn√©es montrent du progr√®s !";
  }

  // G√©n√©rer conseil sommeil
  generateSleepAdvice(healthData) {
    if (!healthData?.sleep) return "Connecte tes donn√©es de sommeil pour des conseils pr√©cis !";
    
    if (healthData.sleep < 6) {
      return "Tu manques de sommeil. Essaie de te coucher 30min plus t√¥t.";
    } else if (healthData.sleep > 9) {
      return "Tu dors beaucoup ! V√©rifie la qualit√© de ton sommeil.";
    } else {
      return "Ta dur√©e de sommeil est correcte ! Focus sur la qualit√©.";
    }
  }

  // G√©n√©rer conseil stress
  generateStressAdvice(healthData) {
    if (!healthData?.stress) return "Active le monitoring de stress pour des conseils adapt√©s !";
    
    if (healthData.stress > 70) {
      return "Niveau de stress √©lev√© d√©tect√©. Prends une pause !";
    } else if (healthData.stress > 50) {
      return "Stress mod√©r√©. Quelques exercices de respiration seraient b√©n√©fiques.";
    } else {
      return "Ton stress semble bien g√©r√© ! Continue comme √ßa.";
    }
  }

  // G√©n√©rer conseil g√©n√©rique
  generateGenericAdvice(message, context) {
    const advices = [
      "une approche progressive et personnalis√©e",
      "de commencer par de petits changements durables",
      "d'√©couter ton corps et ajuster selon tes sensations",
      "de rester r√©gulier dans tes efforts",
      "de c√©l√©brer chaque petit progr√®s"
    ];
    
    return advices[Math.floor(Math.random() * advices.length)];
  }

  // S√©lectionner le provider optimal
  selectProvider(preferredProvider = null) {
    if (preferredProvider && this.isProviderAvailable(preferredProvider)) {
      return preferredProvider;
    }
    
    if (this.claudeEnabled) return 'claude';
    if (this.openaiEnabled) return 'openai';
    
    return 'mock';
  }

  // V√©rifier disponibilit√© d'un provider
  isProviderAvailable(provider) {
    switch (provider) {
      case 'claude': return this.claudeEnabled;
      case 'openai': return this.openaiEnabled;
      default: return false;
    }
  }

  // Calculer le co√ªt approximatif
  calculateCost(provider, inputTokens, outputTokens) {
    const costs = {
      openai: { input: 0.001, output: 0.002 }, // Par 1000 tokens
      claude: { input: 0.003, output: 0.015 }  // Par 1000 tokens
    };
    
    const providerCosts = costs[provider];
    if (!providerCosts) return 0;
    
    return ((inputTokens * providerCosts.input) + (outputTokens * providerCosts.output)) / 1000;
  }

  // Analyser les tendances de conversation
  async analyzeConversationTrends(userId, days = 30) {
    // TODO: Impl√©menter l'analyse des tendances de conversation
    // Analyser les sujets les plus discut√©s, l'√©volution des questions, etc.
    
    return {
      topTopics: ['nutrition', 'fitness', 'sleep'],
      engagement: 'high',
      progressionNoted: true,
      suggestions: [
        'Continuer √† poser des questions sur la nutrition',
        'Explorer les techniques de gestion du stress',
        'Planifier des objectifs fitness √† long terme'
      ]
    };
  }
}

module.exports = new AIChatService();