const cron = require('node-cron');
const firebaseService = require('../services/firebase.service');

class NotificationScheduler {
    constructor() {
        this.jobs = new Map();
        this.isRunning = false;
    }

    start() {
        if (this.isRunning) {
            console.log('üìÖ Scheduler de notifications d√©j√† en cours');
            return;
        }

        console.log('üöÄ D√©marrage du scheduler de notifications...');

        // Rappels d'hydratation toutes les 2h de 8h √† 20h
        this.scheduleJob('hydration-reminders', '0 8,10,12,14,16,18,20 * * *', async () => {
            console.log('üíß Envoi des rappels d\'hydratation');
            try {
                await firebaseService.sendHealthReminders();
            } catch (error) {
                console.error('‚ùå Erreur rappels hydratation:', error);
            }
        });

        // Rappels d'exercice √† 16h tous les jours
        this.scheduleJob('workout-reminders', '0 16 * * *', async () => {
            console.log('üèÉ‚Äç‚ôÇÔ∏è Envoi des rappels d\'exercice');
            try {
                await firebaseService.sendNotificationToTopic('workout_reminders', {
                    title: 'üèÉ‚Äç‚ôÇÔ∏è Temps d\'Activit√© !',
                    body: 'Il est temps de bouger ! Que diriez-vous d\'un peu d\'exercice ?',
                    type: 'health_reminder',
                    data: { reminderType: 'workout' }
                });
            } catch (error) {
                console.error('‚ùå Erreur rappels exercice:', error);
            }
        });

        // Rappels de sommeil √† 22h
        this.scheduleJob('sleep-reminders', '0 22 * * *', async () => {
            console.log('üåô Envoi des rappels de sommeil');
            try {
                await firebaseService.sendNotificationToTopic('health_tips', {
                    title: 'üåô Pr√©paration au Sommeil',
                    body: 'Il est temps de vous pr√©parer pour une bonne nuit de repos !',
                    type: 'health_reminder',
                    data: { reminderType: 'sleep' }
                });
            } catch (error) {
                console.error('‚ùå Erreur rappels sommeil:', error);
            }
        });

        // Conseils sant√© quotidiens √† 9h
        this.scheduleJob('daily-tips', '0 9 * * *', async () => {
            console.log('üí° Envoi des conseils sant√© quotidiens');
            const tips = [
                {
                    title: 'üí° Conseil Sant√© du Jour',
                    body: 'Commencez votre journ√©e par 10 minutes de m√©ditation pour r√©duire le stress.',
                    type: 'health_tip'
                },
                {
                    title: 'ü•ó Nutrition du Jour',
                    body: 'Incluez des l√©gumes color√©s dans chaque repas pour plus de vitamines.',
                    type: 'nutrition_tip'
                },
                {
                    title: 'üèÉ‚Äç‚ôÄÔ∏è Mouvement du Jour',
                    body: 'Prenez les escaliers au lieu de l\'ascenseur aujourd\'hui !',
                    type: 'activity_tip'
                },
                {
                    title: 'üò¥ Sommeil du Jour',
                    body: '√âvitez les √©crans 1h avant le coucher pour un meilleur sommeil.',
                    type: 'sleep_tip'
                }
            ];

            const randomTip = tips[Math.floor(Math.random() * tips.length)];
            
            try {
                await firebaseService.sendNotificationToTopic('health_tips', {
                    ...randomTip,
                    data: { category: randomTip.type }
                });
            } catch (error) {
                console.error('‚ùå Erreur conseils quotidiens:', error);
            }
        });

        // Motivation hebdomadaire le lundi √† 8h
        this.scheduleJob('weekly-motivation', '0 8 * * 1', async () => {
            console.log('üî• Envoi de la motivation hebdomadaire');
            try {
                await firebaseService.sendNotificationToTopic('achievements', {
                    title: 'üî• Nouvelle Semaine, Nouveaux Objectifs !',
                    body: 'C\'est parti pour une semaine pleine d\'√©nergie et de r√©ussites !',
                    type: 'motivation',
                    data: { category: 'weekly_motivation' }
                });
            } catch (error) {
                console.error('‚ùå Erreur motivation hebdomadaire:', error);
            }
        });

        // Rappel weekly recap le dimanche √† 19h
        this.scheduleJob('weekly-recap', '0 19 * * 0', async () => {
            console.log('üìä Envoi du r√©capitulatif hebdomadaire');
            try {
                await firebaseService.sendNotificationToTopic('achievements', {
                    title: 'üìä Votre Semaine en R√©sum√©',
                    body: 'D√©couvrez vos progr√®s et pr√©parez la semaine prochaine !',
                    type: 'recap',
                    data: { category: 'weekly_recap' }
                });
            } catch (error) {
                console.error('‚ùå Erreur r√©capitulatif hebdomadaire:', error);
            }
        });

        this.isRunning = true;
        console.log('‚úÖ Scheduler de notifications d√©marr√© avec succ√®s');
        console.log(`üìù ${this.jobs.size} t√¢ches programm√©es:`);
        this.jobs.forEach((job, name) => {
            console.log(`   - ${name}`);
        });
    }

    scheduleJob(name, schedule, task) {
        if (this.jobs.has(name)) {
            console.log(`‚ö†Ô∏è T√¢che "${name}" d√©j√† programm√©e, remplacement...`);
            this.jobs.get(name).destroy();
        }

        const job = cron.schedule(schedule, task, {
            scheduled: true,
            timezone: 'Europe/Paris'
        });

        this.jobs.set(name, job);
        console.log(`‚úÖ T√¢che "${name}" programm√©e: ${schedule}`);
    }

    stop() {
        if (!this.isRunning) {
            console.log('‚ö†Ô∏è Scheduler de notifications d√©j√† arr√™t√©');
            return;
        }

        console.log('üõë Arr√™t du scheduler de notifications...');
        
        this.jobs.forEach((job, name) => {
            job.destroy();
            console.log(`   - T√¢che "${name}" arr√™t√©e`);
        });

        this.jobs.clear();
        this.isRunning = false;
        console.log('‚úÖ Scheduler de notifications arr√™t√©');
    }

    getStatus() {
        return {
            isRunning: this.isRunning,
            jobCount: this.jobs.size,
            jobs: Array.from(this.jobs.keys())
        };
    }

    // M√©thodes pour envoyer des notifications sp√©cifiques imm√©diatement
    async sendWelcomeNotification(userId, userName) {
        try {
            await firebaseService.sendNotificationToUser(userId, {
                title: `üéâ Bienvenue ${userName} !`,
                body: 'Commencez votre parcours sant√© avec AVA Coach. Nous sommes l√† pour vous accompagner !',
                type: 'welcome',
                data: { 
                    category: 'onboarding',
                    userName: userName
                }
            });
            console.log(`üëã Notification de bienvenue envoy√©e √† ${userName}`);
        } catch (error) {
            console.error('‚ùå Erreur notification bienvenue:', error);
            throw error;
        }
    }

    async sendAchievementNotification(userId, achievement) {
        try {
            await firebaseService.sendNotificationToUser(userId, {
                title: 'üèÜ Nouveau Succ√®s D√©bloqu√© !',
                body: `F√©licitations ! Vous avez atteint: ${achievement.title}`,
                type: 'achievement',
                data: { 
                    category: 'achievement',
                    achievementId: achievement.id,
                    points: achievement.points
                }
            });
            console.log(`üèÜ Notification de succ√®s envoy√©e pour: ${achievement.title}`);
        } catch (error) {
            console.error('‚ùå Erreur notification succ√®s:', error);
            throw error;
        }
    }

    async sendSubscriptionUpgrade(userId, newTier) {
        try {
            const tierNames = {
                perform: 'Perform',
                pro: 'Pro',
                elite: 'Elite'
            };

            await firebaseService.sendNotificationToUser(userId, {
                title: '‚≠ê Mise √† niveau Premium !',
                body: `Bienvenue dans ${tierNames[newTier]} ! D√©couvrez vos nouvelles fonctionnalit√©s.`,
                type: 'subscription',
                data: { 
                    category: 'subscription_upgrade',
                    newTier: newTier
                }
            });
            console.log(`‚≠ê Notification upgrade envoy√©e pour: ${newTier}`);
        } catch (error) {
            console.error('‚ùå Erreur notification upgrade:', error);
            throw error;
        }
    }

    async sendHealthAlert(userId, alertType, message) {
        try {
            const alertIcons = {
                low_activity: 'üö®',
                high_stress: 'üò∞',
                poor_sleep: 'üò¥',
                dehydration: 'üíß'
            };

            await firebaseService.sendNotificationToUser(userId, {
                title: `${alertIcons[alertType] || '‚ö†Ô∏è'} Alerte Sant√©`,
                body: message,
                type: 'health_alert',
                data: { 
                    category: 'health_alert',
                    alertType: alertType
                }
            });
            console.log(`‚ö†Ô∏è Alerte sant√© envoy√©e: ${alertType}`);
        } catch (error) {
            console.error('‚ùå Erreur alerte sant√©:', error);
            throw error;
        }
    }
}

module.exports = new NotificationScheduler();