name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: ava-backend
  FRONTEND_IMAGE_NAME: ava-frontend

jobs:
  # Test Backend
  test-backend:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: secure_password
          MONGO_INITDB_DATABASE: ava_coach_sante_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Create test environment file
      working-directory: ./backend
      run: |
        cat > .env.test << EOF
        NODE_ENV=test
        PORT=5003
        MONGODB_URI=mongodb://admin:secure_password@localhost:27017/ava_coach_sante_test?authSource=admin
        REDIS_URL=redis://localhost:6379
        JWT_SECRET=test-jwt-secret-key-for-ci
        CORS_ORIGIN=http://localhost:3000
        SPOONACULAR_API_KEY=test-key
        OPENAI_API_KEY=test-key
        ANTHROPIC_API_KEY=test-key
        STRIPE_SECRET_KEY=sk_test_fake
        STRIPE_PUBLISHABLE_KEY=pk_test_fake
        STRIPE_WEBHOOK_SECRET=whsec_test
        GARMIN_CLIENT_ID=test-client-id
        GARMIN_CLIENT_SECRET=test-client-secret
        GARMIN_CONSUMER_KEY=test-consumer-key
        GARMIN_CONSUMER_SECRET=test-consumer-secret
        FROM_EMAIL=test@ava-coach-sante.com
        EMAIL_PROVIDER=test
        EOF

    - name: Run backend tests
      working-directory: ./backend
      run: npm test
      env:
        NODE_ENV: test

    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint --if-present

  # Test Frontend
  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test --if-present

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint --if-present

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.ref == 'refs/heads/main'
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract backend metadata
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract frontend metadata
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment commands here
        # This could be kubectl, docker-compose, or cloud provider specific commands
        
    - name: Run health checks
      run: |
        echo "Running health checks..."
        # Add health check commands here

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-images, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add deployment commands here
        
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add health check commands here

    - name: Notify deployment success
      if: success()
      run: |
        echo "🚀 Production deployment successful!"
        # Add notification logic here (Slack, email, etc.)

    - name: Rollback on failure
      if: failure()
      run: |
        echo "❌ Deployment failed - initiating rollback"
        # Add rollback logic here