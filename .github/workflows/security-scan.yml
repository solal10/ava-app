name: Security Scan

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run npm audit for backend
      working-directory: ./backend
      run: |
        npm audit --audit-level high --json > backend-audit.json || true
        
    - name: Run npm audit for frontend
      working-directory: ./frontend
      run: |
        npm audit --audit-level high --json > frontend-audit.json || true

    - name: Upload audit reports
      uses: actions/upload-artifact@v4
      with:
        name: audit-reports
        path: |
          backend/backend-audit.json
          frontend/frontend-audit.json

  secret-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

  code-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  docker-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build backend image for scanning
      run: docker build -t ava-backend-scan ./backend

    - name: Build frontend image for scanning
      run: docker build -t ava-frontend-scan ./frontend

    - name: Run Trivy scanner on backend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ava-backend-scan'
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: Run Trivy scanner on frontend image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ava-frontend-scan'
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: Upload backend Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'backend-trivy-results.sarif'
        category: 'backend-trivy'

    - name: Upload frontend Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'frontend-trivy-results.sarif'
        category: 'frontend-trivy'

  security-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, code-scan, docker-scan]
    if: always()
    steps:
    - name: Generate security report
      run: |
        echo "Security scan completed."
        echo "Check the Security tab for detailed results."
        
    - name: Notify on high severity findings
      if: failure()
      run: |
        echo "⚠️ High severity security issues found!"
        echo "Please review the Security tab immediately."